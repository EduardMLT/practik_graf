import matplotlib.pyplot as plt
import networkx as nx

# Створення графа
G = nx.DiGraph()

# Масиви вузлів і підвузлів
practices = ['1\nПланування\nтестування', 
             '2\nТест-дизайн',
             '3\nВиконання\nтестів',
             '4\nАналіз\nрезультатів',
             '5\nЗвітність' ]
G.add_nodes_from(practices)

# Створення списку кольорів для кожного вузла
node_colors = [
    'red', 'blue', 'green', 'orange', 'purple',  # Основні вузли
    'red', 'red', 'red', 'red',                  # Підвузли для Планування тестування
    'blue', 'blue', 'blue', 'blue', 'blue', 'blue', # Підвузли для Тест-дизайну
    'green', 'green', 'green', 'green',         # Підвузли для Виконання тестів
    'orange', 'orange', 'orange', 'orange',     # Підвузли для Аналізу результатів
    'purple', 'purple', 'purple', 'purple'      # Підвузли для Звітності
]

# Додавання ребер між вузлами
edges = [
    ('1\nПланування\nтестування', '1\nВизначення\nмети \nтестування'), 
    ('1\nПланування\nтестування', '2\nОцінка \nресурсів'), 
    ('1\nПланування\nтестування', '3\nСкладання\nграфіка \nтестування'), 
    ('1\nПланування\nтестування', '4\nВизначення\nризиків та їх\nуправління'), 
    ('2\nТест-дизайн', '1\nАналіз \nвимог'), 
    ('2\nТест-дизайн', '2\nВибір \nтестових\nтехнік та \nметодів'), 
    ('2\nТест-дизайн', '3\nСтворення \nтестових\nвипадків і \nсценаріїв'), 
    ('2\nТест-дизайн', '4\nВибір \nтестових \nданих'), 
    ('2\nТест-дизайн', '5\nОптимізація\nтестових \nвипадків'), 
    ('2\nТест-дизайн', '6\nРецензування \nтестів'), 
    ('3\nВиконання\nтестів', '1\nПідготовка\nтестового \nсередовища'), 
    ('3\nВиконання\nтестів', '2\nЗапуск \nтестів'), 
    ('3\nВиконання\nтестів', '3\nФіксація \nрезультатів'), 
    ('3\nВиконання\nтестів', '4\nПовторне \nтестування'), 
    ('4\nАналіз\nрезультатів', '1\nЗбір та \nсистематизація \nрезультатів'), 
    ('4\nАналіз\nрезультатів', '2\nПорівняння \nфактичних і \nочікуваних \nрезультатів'), 
    ('4\nАналіз\nрезультатів', '3\nВиявлення \nдефектів'), 
    ('4\nАналіз\nрезультатів', '4\nАналіз \nпричин \nдефектів'),
    ('5\nЗвітність', '1\nСтворення \nзвіту про \nтестування'), 
    ('5\nЗвітність', '2\nОцінка \nпокриття \nтестами'), 
    ('5\nЗвітність', '3\nПідготовка \nрекомендацій'), 
    ('5\nЗвітність', '4\nПрезентація \nрезультатів')
]
G.add_edges_from(edges)

# Визначення кольорів для кожного ребра
edge_colors = [
    'red', 'red', 'red', 'red',                  # Ребра для Планування тестування
    'blue', 'blue', 'blue', 'blue', 'blue', 'blue', # Ребра для Тест-дизайну
    'green', 'green', 'green', 'green',         # Ребра для Виконання тестів
    'orange', 'orange', 'orange', 'orange',     # Ребра для Аналізу результатів
    'purple', 'purple', 'purple', 'purple'      # Ребра для Звітності
]

# Відображення графа
plt.figure(figsize=(20, 15))

# методи розкладання графа
pos = nx.shell_layout(G)  # більш-менш наглядно
# pos = nx.circular_layout(G) - дзеркально
# pos = nx.spring_layout(G) # від центру - плутано
# pos = nx.planar_layout(G) - островками
nx.draw(G, pos, with_labels=True, node_size=3000, node_color=node_colors, font_size=12, font_weight="bold", arrowsize=20, edge_color=edge_colors)

plt.title('Практики тестування програмного забезпечення', fontsize=15)

plt.savefig("test_practik_graf_01_struct.png")  # Збереження графу у файл
plt.show()